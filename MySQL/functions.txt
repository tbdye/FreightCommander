#ufnGetProductType
DROP FUNCTION IF EXISTS ufnGetProductType;
DELIMITER $$
CREATE FUNCTION ufnGetProductType (
	MyCarID VARCHAR(255))
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
	DECLARE MyProductTypeName VARCHAR(255);
    
    SET MyProductTypeName = (SELECT ProductTypeName
		FROM ProductTypes
        WHERE CarTypeName = (SELECT CarTypeName
			FROM RollingStockCars
			WHERE CarID = MyCarID)
		ORDER BY RAND() LIMIT 0, 1);
    RETURN MyProductTypeName;
END$$
DELIMITER ;

#ufnGetProducingIndustry
DROP FUNCTION IF EXISTS ufnGetProducingIndustry;
DELIMITER $$
CREATE FUNCTION ufnGetProducingIndustry (
	MyCarLength INT,
    MyProductTypeName VARCHAR(255))
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
	DECLARE MyIndustryName VARCHAR(255);
    
    DROP TEMPORARY TABLE IF EXISTS IndustriesFilter;
    CREATE TEMPORARY TABLE IndustriesFilter (
        IndustryName VARCHAR(255) NOT NULL PRIMARY KEY
	);
    
    INSERT INTO IndustriesFilter (IndustryName)
		SELECT s.IndustryName
        FROM IndustrySidings s
        JOIN IndustryProducts p ON s.IndustryName = p.IndustryName
        WHERE s.AvailableLength >= MyCarLength
        AND s.IndustryName IN (SELECT IndustryName
			FROM IndustriesAvailable
            WHERE IsAvailable = TRUE)
        AND s.SidingNumber IN (SELECT SidingNumber
			FROM SidingAssignments
            WHERE ProductTypeName = MyProductTypeName)
        AND p.ProductTypeName = MyProductTypeName
        AND p.IsProducer = TRUE
        GROUP BY s.IndustryName
		UNION SELECT s.IndustryName
        FROM IndustrySidings s
        JOIN IndustryProducts p ON s.IndustryName = p.IndustryName
        WHERE s.AvailableLength >= MyCarLength
		AND s.IndustryName IN (SELECT IndustryName
			FROM IndustriesAvailable
            WHERE IsAvailable = TRUE)
        AND s.IndustryName NOT IN (SELECT IndustryName
			FROM SidingAssignments
            WHERE ProductTypeName = MyProductTypeName)
        AND p.ProductTypeName = MyProductTypeName
        AND p.IsProducer = TRUE
        GROUP BY s.IndustryName;
    
    DROP TEMPORARY TABLE IF EXISTS IndustriesList;
    CREATE TEMPORARY TABLE IndustriesList (
		IndustryID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
        IndustryName VARCHAR(255) NOT NULL
	);
    
	SET @minimumActivity = (SELECT MIN(ActivityLevel)
		FROM IndustryProducts p
		JOIN IndustryActivities a ON p.IndustryName = a.IndustryName
		WHERE p.ProductTypeName = MyProductTypeName
        AND p.IndustryName IN (
			SELECT IndustryName
            FROM IndustriesFilter));
    SET @maximumActivity = (SELECT MAX(ActivityLevel)
		FROM IndustryProducts p
        JOIN IndustryActivities a ON p.IndustryName = a.IndustryName
		WHERE p.ProductTypeName = MyProductTypeName
        AND p.IndustryName IN (
			SELECT IndustryName
            FROM IndustriesFilter));
    SET @activityLevel = @maximumActivity;
    
    WHILE @activityLevel >= @minimumActivity DO
		SET @counter = @minimumActivity;
        WHILE @counter <= @activityLevel DO
            INSERT INTO IndustriesList (IndustryID, IndustryName)
				SELECT NULL, p.IndustryName
                FROM IndustryProducts p
                JOIN IndustryActivities a ON p.IndustryName = a.IndustryName
                WHERE p.IndustryName IN (
					SELECT IndustryName
                    FROM IndustriesFilter)
				AND p.ProductTypeName = MyProductTypeName
                AND p.IsProducer = TRUE
                AND a.ActivityLevel = @activityLevel;
            SET @counter = @counter + 1;
		END WHILE;
		SET @activityLevel = @activityLevel - 1;
	END WHILE;

	SET MyIndustryName = (SELECT IndustryName FROM IndustriesList ORDER BY RAND() LIMIT 0, 1);
    RETURN MyIndustryName;
END$$
DELIMITER ;

#ufnGetIndustrySiding
DROP FUNCTION IF EXISTS ufnGetIndustrySiding;
DELIMITER $$
CREATE FUNCTION ufnGetIndustrySiding (
	MyIndustryName VARCHAR(255),
    MyProductTypeName VARCHAR(255))
RETURNS INT
DETERMINISTIC
BEGIN
	DECLARE MySidingNumber INT;
    
	DROP TEMPORARY TABLE IF EXISTS SidingsList;
    CREATE TEMPORARY TABLE SidingsList (
        SidingNumber INT NOT NULL PRIMARY KEY,
        AvailableLength INT NOT NULL
	);
    
    INSERT INTO SidingsList (SidingNumber, AvailableLength)
		SELECT s.SidingNumber, s.AvailableLength
		FROM IndustrySidings s
		JOIN IndustryProducts p ON s.IndustryName = p.IndustryName
		WHERE p.ProductTypeName NOT IN (SELECT ProductTypeName
			FROM SidingAssignments
			WHERE IndustryName = MyIndustryName)
			AND s.SidingNumber NOT IN (SELECT SidingNumber
				FROM SidingAssignments
				WHERE IndustryName = MyIndustryName)
			AND s.IndustryName = MyIndustryName
			AND p.ProductTypeName = MyProductTypeName
		UNION SELECT s.SidingNumber, s.AvailableLength
		FROM IndustrySidings s
		JOIN IndustryProducts p ON s.IndustryName = p.IndustryName
		WHERE p.ProductTypeName IN (SELECT ProductTypeName
			FROM SidingAssignments
			WHERE IndustryName = MyIndustryName)
			AND s.SidingNumber IN (SELECT SidingNumber
				FROM SidingAssignments
				WHERE IndustryName = MyIndustryName)
			AND s.IndustryName = MyIndustryName
			AND p.ProductTypeName = MyProductTypeName;
    
    SET MySidingNumber = (SELECT SidingNumber
		FROM SidingsList
        ORDER BY AvailableLength DESC LIMIT 1);
    RETURN MySidingNumber;
END$$
DELIMITER ;

DROP FUNCTION IF EXISTS ufnGetConsumingIndustry;
DELIMITER $$
CREATE FUNCTION ufnGetConsumingIndustry (
	ProductTypeName VARCHAR(255))
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
	DECLARE IndustryName VARCHAR(255);
    SET IndustryName = 'temp';
    RETURN IndustryName;
END$$
DELIMITER ;

DROP FUNCTION IF EXISTS ufnGetReturnYard;
DELIMITER $$
CREATE FUNCTION ufnGetReturnYard ()
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
	DECLARE YardName VARCHAR(255);
    SET YardName = 'temp';
    RETURN YardName;
END$$
DELIMITER ;

DROP FUNCTION IF EXISTS ufnGetCarModuleName;
DELIMITER $$
CREATE FUNCTION ufnGetCarModuleName (
	CarID INT)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
	DECLARE ModuleName VARCHAR(255);
    SET ModuleName = 'temp';
    RETURN ModuleName;
END$$
DELIMITER ;