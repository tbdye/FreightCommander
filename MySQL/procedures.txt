#uspClientAddTrain(TrainNumber, LeadPower, DCCAddress, 'ModuleName')
DROP PROCEDURE IF EXISTS uspClientAddTrain;
DELIMITER $$
CREATE PROCEDURE uspClientAddTrain (
	IN MyTrainNumber INT,
    IN MyLeadPower VARCHAR(255),
    IN MyDCCAddress CHAR(4),
    IN MyModuleName VARCHAR(255))
BEGIN
	IF (MyTrainNumber IN (SELECT TrainNumber FROM Trains WHERE TrainNumber = MyTrainNumber)) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'This train already exists.';
	ELSEIF (MyModuleName NOT IN (SELECT ModuleName FROM ModulesAvailable WHERE ModuleName = MyModuleName)) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'This location does not exist or is not active.';
	ELSE
		INSERT INTO Trains VALUES (MyTrainNumber, MyLeadPower, MyDCCAddress, DEFAULT);
		INSERT INTO TrainLocations VALUES (MyTrainNumber, MyModuleName, DEFAULT);
	END IF;
END$$
DELIMITER ;

#uspClientRemoveTrain(TrainNumber)
DROP PROCEDURE IF EXISTS uspClientRemoveTrain;
DELIMITER $$
CREATE PROCEDURE uspClientRemoveTrain (
	IN MyTrainNumber INT)
BEGIN
	IF (MyTrainNumber NOT IN (SELECT TrainNumber FROM Trains WHERE TrainNumber = MyTrainNumber)) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Train not found.';
	ELSEIF (MyTrainNumber IN (SELECT TrainNumber FROM ConsistedCars WHERE TrainNumber = MyTrainNumber)) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Train has remaining consisted cars.';
	ELSE
		DELETE FROM Trains WHERE TrainNumber = MyTrainNumber;
	END IF;
END$$
DELIMITER ;

#uspClientModifyTrain(TrainNumber, LeadPower, DCCAddress)
DROP PROCEDURE IF EXISTS uspClientModifyTrain;
DELIMITER $$
CREATE PROCEDURE uspClientModifyTrain (
	IN MyTrainNumber INT,
    IN NewLeadPower VARCHAR(255),
    IN NewDCCAddress CHAR(4))
BEGIN
	IF (MyTrainNumber NOT IN (SELECT TrainNumber FROM Trains WHERE TrainNumber = MyTrainNumber)) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Train not found.';
	ELSE
		UPDATE Trains SET LeadPower = NewLeadPower, DCCAddress = NewDCCAddress WHERE TrainNumber = MyTrainNumber;
	END IF;
END$$
DELIMITER ;

#uspClientAddCarToGame('CarID', 'CarTypeName', 'YardName')
DROP PROCEDURE IF EXISTS uspClientAddCarToGame;
DELIMITER $$
CREATE PROCEDURE uspClientAddCarToGame (
	IN MyCarID VARCHAR(255),
    IN MyCarTypeName VARCHAR(255),
    IN MyYardName VARCHAR(255))
BEGIN
	CASE
		WHEN (MyCarID IN (SELECT CarID FROM RollingStockCars WHERE CarID = MyCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This car already exists.';
		WHEN (MyCarTypeName NOT IN (SELECT CarTypeName FROM RollingStockTypes WHERE CarTypeName = MyCarTypeName)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This car type does not exist.';
		WHEN (MyYardName NOT IN (SELECT YardName FROM Yards WHERE YardName = MyYardName)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This yard does not exist.';
		ELSE
			INSERT INTO RollingStockCars VALUES (MyCarID, MyCarTypeName);
			INSERT INTO RollingStockAtYards VALUES (MyCarID, MyYardName, DEFAULT);
	END CASE;
END$$
DELIMITER ;

#uspClientRemoveCarFromGame('CarID')
DROP PROCEDURE IF EXISTS uspClientRemoveCarFromGame;
DELIMITER $$
CREATE PROCEDURE uspClientRemoveCarFromGame (
	IN MyCarID VARCHAR(255))
BEGIN
	CASE
		WHEN (MyCarID NOT IN (SELECT CarID FROM RollingStockCars WHERE CarID = MyCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Car not found.';
		WHEN (MyCarID IN (SELECT CarID FROM ConsistedCars WHERE CarID = MyCarID)) THEN
			SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Car is consisted to a train and cannot be removed.';
        WHEN (MyCarID IN (SELECT CarID FROM Waybills WHERE CarID = MyCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Car has existing waybill and cannot be removed.';
		ELSE
			DELETE FROM RollingStockCars WHERE CarID = MyCarID;
	END CASE;
END$$
DELIMITER ;

#uspClientAddCarToService('CarID')
DROP PROCEDURE IF EXISTS uspClientAddCarToService;
DELIMITER $$
CREATE PROCEDURE uspClientAddCarToService (
	IN MyCarID VARCHAR(255))
BEGIN
	IF (MyCarID NOT IN (SELECT CarID FROM RollingStockCars WHERE CarID = MyCarID)) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'This car could not be found.';
	ELSEIF (MyCarID IN (SELECT CarID FROM Waybills WHERE CarID = MyCarID)) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'This car is already in service.';
    ELSE
		SET @carTypeName = (SELECT CarTypeName
			FROM RollingStockCars
			WHERE CarID = MyCarID);
        SET @productTypeName = ufnGetProductType(@carTypeName);
        
        IF (@productTypeName IS NULL) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'There are no industry orders for this car type on this layout.';
        ELSE
			SET @carLength = (SELECT CarLength
				FROM RollingStockTypes
				WHERE CarTypeName = @carTypeName);
            SET @fromIndustry = ufnGetProducingIndustry(@carLength, @productTypeName);
            SET @toIndustry = ufnGetConsumingIndustry(@carLength, @productTypeName);
            
            IF (@fromIndustry IS NULL OR @toIndustry IS NULL) THEN
				SIGNAL SQLSTATE '45000'
				SET MESSAGE_TEXT = 'There are no industry orders at this time.';
			ELSE
				SET @fromSiding = ufnGetIndustrySiding(@fromIndustry, @productTypeName);
                SET @toSiding = ufnGetIndustrySiding(@toIndustry, @productTypeName);
                INSERT INTO Shipments VALUES (DEFAULT, @productTypeName, @fromIndustry, @fromSiding, @toIndustry, @toSiding, DEFAULT);
                SET SQL_SAFE_UPDATES = 0;
                UPDATE IndustrySidings SET AvailableLength = AvailableLength - @carLength WHERE IndustryName = @fromIndustry AND SidingNumber = @fromSiding;
                SET SQL_SAFE_UPDATES = 1;
				
                SET @yardName = (SELECT YardName
					FROM Yards
					ORDER BY RAND() LIMIT 0, 1);
				INSERT INTO Waybills VALUES (MyCarID, LAST_INSERT_ID(), @yardName);
            END IF;
        END IF;
	END IF;
END$$
DELIMITER ;

#uspClientRemoveCarFromService('CarID')
DROP PROCEDURE IF EXISTS uspClientRemoveCarFromService;
DELIMITER $$
CREATE PROCEDURE uspClientRemoveCarFromService (
	IN MyCarID VARCHAR(255))
BEGIN
	IF (MyCarID NOT IN (SELECT CarID FROM RollingStockCars WHERE CarID = MyCarID)) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'This car could not be found.';
    ELSEIF (MyCarID NOT IN (SELECT CarID FROM Waybills WHERE CarID = MyCarID)) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'This car is not in service.';
    ELSE
		SET @shipmentID = (SELECT ShipmentID
			FROM Waybills
            WHERE CarID = MyCarID);
        SET @canRemoveWaybill = (@shipmentID NOT IN (SELECT ShipmentID
					FROM ShipmentsLoaded
                    WHERE ShipmentID = @shipmentID)
				AND @shipmentID NOT IN (SELECT ShipmentID
					FROM ShipmentsUnloaded
                    WHERE ShipmentID = @shipmentID))
			OR (@shipmentID IN (SELECT ShipmentID
					FROM ShipmentsLoaded
                    WHERE ShipmentID = @shipmentID)
				AND @shipmentID IN (SELECT ShipmentID
					FROM ShipmentsUnloaded
                    WHERE ShipmentID = @shipmentID));
		
        IF (@canRemoveWaybill) THEN
			DELETE FROM Waybills WHERE CarID = MyCarID;      

			SET @carLength = (SELECT CarLength
				FROM RollingStockTypes
				WHERE CarTypeName = (SELECT CarTypeName
					FROM RollingStockCars
					WHERE CarID = MyCarID));
            SET @fromIndustry = (SELECT FromIndustry
				FROM Shipments
                WHERE ShipmentID = @shipmentID);
            SET @fromSiding = (SELECT FromSiding
				FROM Shipments
                WHERE ShipmentID = @shipmentID);
            SET SQL_SAFE_UPDATES = 0;
			UPDATE IndustrySidings SET AvailableLength = AvailableLength + @carLength WHERE IndustryName = @fromIndustry AND SidingNumber = @fromSiding;
			SET SQL_SAFE_UPDATES = 1;
		ELSE
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Car has open waybill and cannot be removed.';
		END IF;
	END IF;
END$$
DELIMITER ;

#uspClientModifyCarInService('OldCarID', 'NewCarID')
DROP PROCEDURE IF EXISTS uspClientModifyCarInService;
DELIMITER $$
CREATE PROCEDURE uspClientModifyCarInService (
	IN OldCarID VARCHAR(255),
    IN NewCarID VARCHAR(255))
BEGIN
	CASE
		WHEN (OldCarID NOT IN (SELECT CarID FROM RollingStockCars WHERE CarID = OldCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Originating carID not found.';
		WHEN (NewCarID NOT IN (SELECT CarID FROM RollingStockCars WHERE CarID = NewCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Replacement carID not found.';
        WHEN (NewCarID IN (SELECT CarID FROM Waybills WHERE CarID = NewCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Replacement carID has existing waybill.';
		ELSE
			SET @oldCarType = (SELECT CarTypeName
				FROM RollingStockCars
                WHERE CarID = OldCarID);
            SET @newCarType = (SELECT CarTypeName
				FROM RollingStockCars
                WHERE CarID = NewCarID);
            IF (@oldCarType <> @newCarType) THEN
				SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = 'Replacement car type does not match original car type.';
            ELSE
				UPDATE Waybills SET CarID = NewCarID WHERE CarID = OldCarID;
            END IF;
	END CASE;
END$$
DELIMITER ;

#uspClientAddCrewToTrain(TrainNumber, 'CrewName')
DROP PROCEDURE IF EXISTS uspClientAddCrewToTrain;
DELIMITER $$
CREATE PROCEDURE uspClientAddCrewToTrain (
	IN MyTrainNumber INT,
    IN MyCrewName VARCHAR(255))
BEGIN
	IF (MyTrainNumber NOT IN (SELECT TrainNumber FROM Trains WHERE TrainNumber = MyTrainNumber)) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'This train could not be found.';
	ELSEIF (MyCrewName IN (SELECT CrewName from TrainCrews WHERE CrewName = MyCrewName)) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'This crew is already assigned to another train.';
	ELSE
		INSERT INTO TrainCrews VALUES (MyTrainNumber, MyCrewName, DEFAULT);
	END IF;
END$$
DELIMITER ;

#uspClientRemoveCrewFromTrain(TrainNumber)
DROP PROCEDURE IF EXISTS uspClientRemoveCrewFromTrain;
DELIMITER $$
CREATE PROCEDURE uspClientRemoveCrewFromTrain (
	IN MyTrainNumber INT)
BEGIN
	IF (MyTrainNumber NOT IN (SELECT TrainNumber FROM Trains WHERE TrainNumber = MyTrainNumber)) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'This train could not be found.';
	ELSEIF (MyTrainNumber NOT IN (SELECT TrainNumber FROM TrainCrews WHERE TrainNumber = MyTrainNumber)) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'This train is not assigned a crew.';
	ELSE
		DELETE FROM TrainCrews WHERE TrainNumber = MyTrainNumber;
	END IF;
END$$
DELIMITER ;

#uspClientMoveTrain(TrainNumber, 'ModuleName')
DROP PROCEDURE IF EXISTS uspClientMoveTrain;
DELIMITER $$
CREATE PROCEDURE uspClientMoveTrain (
	IN MyTrainNumber INT,
    IN MyModuleName VARCHAR(255))
BEGIN
	CASE
		WHEN (MyTrainNumber NOT IN (SELECT TrainNumber FROM Trains WHERE TrainNumber = MyTrainNumber)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This train could not be found.';
		WHEN (MyModuleName NOT IN (SELECT ModuleName FROM ModulesAvailable WHERE ModuleName = MyModuleName)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This location does not exist or is not active.';
		WHEN (MyTrainNumber NOT IN (SELECT TrainNumber FROM TrainCrews WHERE TrainNumber = MyTrainNumber)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This train is not crewed and cannot move.';
		WHEN (MyModuleName IN (SELECT ModuleName FROM TrainLocations WHERE TrainNumber = MyTrainNumber)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'The train was already at that location.';
		ELSE
			UPDATE TrainLocations SET ModuleName = MyModuleName WHERE TrainNumber = MyTrainNumber;
	END CASE;
END$$
DELIMITER ;

#uspClientMoveCarToTrain(TrainNumber, 'CarID')
DROP PROCEDURE IF EXISTS uspClientMoveCarToTrain;
DELIMITER $$
CREATE PROCEDURE uspClientMoveCarToTrain (
	IN MyTrainNumber INT,
    IN MyCarID VARCHAR(255))
BEGIN
	CASE
		WHEN (MyTrainNumber NOT IN (SELECT TrainNumber FROM Trains WHERE TrainNumber = MyTrainNumber)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This train could not be found.';
		WHEN (MyCarID NOT IN (SELECT CarID FROM RollingStockCars WHERE CarID = MyCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This car could not be found.';
		WHEN (MyCarID IN (SELECT CarID FROM ConsistedCars WHERE TrainNumber = MyTrainNumber AND CarID = MyCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This car is already in your train.';
        WHEN ((SELECT ModuleName FROM TrainLocations WHERE TrainNumber = MyTrainNumber) <> ufnGetCarModuleName(MyCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This car is not in the same location as the train.';
		WHEN (MyCarID IN (SELECT CarID FROM RollingStockAtYards WHERE CarID = MyCarID)) THEN
			INSERT INTO ConsistedCars VALUES (MyTrainNumber, MyCarID, DEFAULT);
			DELETE FROM RollingStockAtYards WHERE CarID = MyCarID;
		WHEN (MyCarID IN (SELECT CarID FROM RollingStockAtIndustries WHERE CarID = MyCarID)) THEN
            IF (MyTrainNumber NOT IN (SELECT TrainNumber FROM TrainCrews WHERE TrainNumber = MyTrainNumber)) THEN
				SIGNAL SQLSTATE '45000'
				SET MESSAGE_TEXT = 'This train is not crewed and cannot move.';
			ELSE
				INSERT INTO ConsistedCars VALUES (MyTrainNumber, MyCarID, DEFAULT);
				DELETE FROM RollingStockAtIndustries WHERE CarID = MyCarID;
			END IF;
		ELSE
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This car is not available.';
	END CASE;
END$$
DELIMITER ;

#uspClientMoveCarFromTrainToYard(TrainNumber, 'CarID', 'YardName')
DROP PROCEDURE IF EXISTS uspClientMoveCarFromTrainToYard;
DELIMITER $$
CREATE PROCEDURE uspClientMoveCarFromTrainToYard (
	IN MyTrainNumber INT,
    IN MyCarID VARCHAR(255),
    IN MyYardName VARCHAR(255))
BEGIN
	CASE
		WHEN (MyTrainNumber NOT IN (SELECT TrainNumber FROM Trains WHERE TrainNumber = MyTrainNumber)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This train could not be found.';
		WHEN (MyCarID NOT IN (SELECT CarID FROM RollingStockCars WHERE CarID = MyCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This car could not be found.';
		WHEN (MyCarID NOT IN (SELECT CarID FROM ConsistedCars WHERE TrainNumber = MyTrainNumber AND CarID = MyCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This car is not in your train.';
		WHEN (MyYardName NOT IN (SELECT YardName FROM Yards WHERE YardName = MyYardName)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This yard does not exist.';
        WHEN ((SELECT ModuleName FROM TrainLocations WHERE TrainNumber = MyTrainNumber)
				<> (SELECT ModuleName FROM Yards WHERE YardName = MyYardName)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'The train cannot drop off the car at the yard from this location.';
		ELSE
			DELETE FROM ConsistedCars WHERE TrainNumber = MyTrainNumber AND CarID = MyCarID;
			INSERT INTO RollingStockAtYards VALUES (MyCarID, MyYardName, DEFAULT);
	END CASE;
END$$
DELIMITER ;

#uspClientMoveCarFromTrainToIndustry(TrainNumber, 'CarID', 'IndustryName', SidingNumber)
DROP PROCEDURE IF EXISTS uspClientMoveCarFromTrainToIndustry;
DELIMITER $$
CREATE PROCEDURE uspClientMoveCarFromTrainToIndustry (
	IN MyTrainNumber INT,
    IN MyCarID VARCHAR(255),
    IN MyIndustryName VARCHAR(255),
    IN MySidingNumber INT)
BEGIN
	CASE
		WHEN (MyTrainNumber NOT IN (SELECT TrainNumber FROM Trains WHERE TrainNumber = MyTrainNumber)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This train could not be found.';
		WHEN (MyCarID NOT IN (SELECT CarID FROM RollingStockCars WHERE CarID = MyCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This car could not be found.';
		WHEN (MyCarID NOT IN (SELECT CarID FROM ConsistedCars WHERE TrainNumber = MyTrainNumber AND CarID = MyCarID)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This car is not in your train.';
		WHEN (MyIndustryName NOT IN (SELECT IndustryName FROM IndustriesAvailable WHERE IndustryName = MyIndustryName)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This industry does not exist or is not available.';
		WHEN (MySidingNumber NOT IN (SELECT SidingNumber FROM IndustrySidings WHERE IndustryName = MyIndustryName AND SidingNumber = MySidingNumber)) THEN
			SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'This siding does not exist at this industry.';
		WHEN (MyTrainNumber NOT IN (SELECT TrainNumber FROM TrainCrews WHERE TrainNumber = MyTrainNumber)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This train is not crewed and cannot move.';
		WHEN ((SELECT ModuleName FROM TrainLocations WHERE TrainNumber = MyTrainNumber)
				<> (SELECT ModuleName FROM Industries WHERE IndustryName = MyIndustryName)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'The train cannot drop off the car at the industry from this location.';
		ELSE
			DELETE FROM ConsistedCars WHERE TrainNumber = MyTrainNumber and CarID = MyCarID;
			INSERT INTO RollingStockAtIndustries VALUES (MyCarID, MyIndustryName, MySidingNumber, DEFAULT);
	END CASE;
END$$
DELIMITER ;

#uspClientServiceIndustry('CarID')
DROP PROCEDURE IF EXISTS uspClientServiceIndustry;
DELIMITER $$
CREATE PROCEDURE uspClientServiceIndustry (
	IN MyCarID VARCHAR(255))
BEGIN
	DECLARE MyShipmentID INT;
    DECLARE MyShipmentLoaded BOOL;
    DECLARE MyShipmentUnloaded BOOL;
    DECLARE MyProductTypeName VARCHAR(255);
    DECLARE MyFromIndustry VARCHAR(255);
    DECLARE MyToIndustry VARCHAR(255);

	DECLARE CarAtIndustryName VARCHAR(255);
    DECLARE CarAtSidingNumber INT;
    DECLARE AccessibleCarSiding BOOL;
    
    DECLARE MyCarLength INT;
    DECLARE MyFromSiding INT;
    
    IF (MyCarID NOT IN (SELECT CarID FROM RollingStockCars WHERE CarID = MyCarID)) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'This car could not be found.';
    ELSEIF (MyCarID NOT IN (SELECT CarID FROM Waybills WHERE CarID = MyCarID)) THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'This car is not in service.';
	ELSE
		#check if car is at correct industry and siding for associated product types.  if not, fail.
        SET MyShipmentID = (SELECT ShipmentID
			FROM Waybills
            WHERE CarID = MyCarID);
		SET MyShipmentLoaded = (MyShipmentID IN (SELECT ShipmentID
			FROM ShipmentsLoaded
            WHERE ShipmentID = MyShipmentID));
        SET MyShipmentUnloaded = (MyShipmentID IN (SELECT ShipmentID
			FROM ShipmentsUnloaded
            WHERE ShipmentID = MyShipmentID));

		SET MyProductTypeName = (SELECT ProductTypeName
			FROM Shipments
            WHERE ShipmentID = MyShipmentID);
		SET MyFromIndustry = (SELECT FromIndustry
			FROM Shipments
            WHERE ShipmentID = MyShipmentID);
        SET MyToIndustry = (SELECT ToIndustry
			FROM Shipments
            WHERE ShipmentID = MyShipmentID);
        
		SET CarAtIndustryName = (SELECT IndustryName
			FROM RollingStockAtIndustries
            WHERE CarID = MyCarID);
		SET CarAtSidingNumber = (SELECT SidingNumber
			FROM RollingStockAtIndustries
            WHERE CarID = MyCarID);
		SET AccessibleCarSiding = (CarAtSidingNumber IN (SELECT s.SidingNumber
			FROM IndustrySidings s
			JOIN IndustryProducts p ON s.IndustryName = p.IndustryName
			WHERE p.ProductTypeName NOT IN (SELECT ProductTypeName
				FROM SidingAssignments
				WHERE IndustryName = CarAtIndustryName)
				AND s.SidingNumber NOT IN (SELECT SidingNumber
					FROM SidingAssignments
					WHERE IndustryName = CarAtIndustryName)
				AND s.IndustryName = CarAtIndustryName
				AND p.ProductTypeName = MyProductTypeName
			UNION SELECT s.SidingNumber
			FROM IndustrySidings s
			JOIN IndustryProducts p ON s.IndustryName = p.IndustryName
			WHERE p.ProductTypeName IN (SELECT ProductTypeName
				FROM SidingAssignments
				WHERE IndustryName = CarAtIndustryName)
				AND s.SidingNumber IN (SELECT SidingNumber
					FROM SidingAssignments
					WHERE IndustryName = CarAtIndustryName)
				AND s.IndustryName = CarAtIndustryName
				AND p.ProductTypeName = MyProductTypeName));
        
		IF (CarAtIndustryName = MyFromIndustry AND NOT MyShipmentLoaded) THEN
			#do loading stuff
			IF (AccessibleCarSiding) THEN
				INSERT INTO ShipmentsLoaded VALUES (MyShipmentID, DEFAULT);
                
				SET MyCarLength = (SELECT CarLength
					FROM RollingStockTypes
					WHERE CarTypeName = (SELECT CarTypeName
						FROM RollingStockCars
						WHERE CarID = MyCarID));
				SET MyFromSiding = (SELECT FromSiding
					FROM Shipments
					WHERE ShipmentID = MyShipmentID);
	            UPDATE IndustrySidings SET AvailableLength = AvailableLength + MyCarLength WHERE IndustryName = MyFromIndustry AND SidingNumber = MyFromSiding;
            ELSE
				SIGNAL SQLSTATE '45000'
				SET MESSAGE_TEXT = 'Cannot load this car at this siding.';
            END IF;
		ELSEIF (CarAtIndustryName = MyToIndustry AND MyShipmentLoaded AND NOT MyShipmentUnloaded) THEN
			#do unloading stuff
			IF (AccessibleCarSiding) THEN
				INSERT INTO ShipmentsUnloaded VALUES (MyShipmentID, DEFAULT);
            ELSE
				SIGNAL SQLSTATE '45000'
				SET MESSAGE_TEXT = 'Cannot unload this car at this siding.';
            END IF;
		ELSE
			#fail
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'This industry has no shipments for this car.';
		END IF;
    END IF;
END$$
DELIMITER ;